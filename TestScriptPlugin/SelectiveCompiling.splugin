
/*
 * This file is part of the Code::Blocks IDE and licensed under the GNU General Public License, version 3
 * http://www.gnu.org/licenses/gpl-3.0.html
 *
 * $Revision$
 * $Id$
 * $HeadURL$
 */

// user-dialog-test
// Script plugins must extend cbScriptPlugin

IncludeScriptFromResource("SelectiveCompiling.zip","utility.nut");

class user_dialog_test_Plugin extends cbScriptPlugin
{

	util = SelectiveCompilingUtility;
    // mandatory to setup the plugin's info
    constructor()
    {
        info = PluginInfo();

        info.name = _T("SelectiveCompiling");
        info.title = _T("SelectiveCompiling");
        info.version = _T("0.1a");
        info.license = _T("GPL");


    }

    // optional to create menubar items
    function GetMenu()
    {
        local entries = ::wxArrayString();
        entries.Add(_T("Plugins/Selective Build"), 1);
        return entries;
    }

    // optional to create context menu entries
    /*function GetModuleMenu(who, data)
    {

    }*/

    // optional to support ExecutePlugin(pluginNameString)
    function Execute()
    {
        //ShowDialog();
        return 0;
    }
	
	function DisplayError(message)
	{
		error(message);
		::ShowMessage(message);
	}

    // optional calback for menubar items clicking
    function OnMenuClicked(index)
    {
        switch(index)
		{
			case 0:
			{
				ShowDialog();
			}
			break;
			default:
			{
			}
			break;
		}
    }

    // optional calback for context menu items clicking
    function OnModuleMenuClicked(index)
    {

    }

 	/*
		Return an array with the projects and targets in ordered sequence:
		[0].name
		[0].targets[0].name
		[0].targets[0].target
	
	*/
	function GetWorkspaceTree()
	{
		local project_manager = GetProjectManager();
		local project_count = project_manager.GetProjectCount();
		//util.line("Projects found: " + project_count);
		local project_tree = [];
		
		for(local i = 0; i < project_count; i++)
		{
			local tmp_project = {};
			tmp_project.targets <- [];
			//util.line("try to get project #" + i);
			local act_project = project_manager.GetProject(i);
			local name = act_project.GetTitle();
			tmp_project.name <- name;
			//util.line("Actual Project: " + name);
			local target_count = act_project.GetBuildTargetsCount();
			//util.line("   Targets found: " + target_count);
			local target_tree = {};
			for(local a = 0; a < target_count; a++)
			{
				local tmp_target = {};
				local act_target = act_project.GetBuildTarget(a);
				local act_target_name = act_target.GetTitle();
				tmp_target.name <- act_target_name;
				tmp_target.target <- act_target;
				//util.line("   Target " + a + ": "+  act_target_name);
				
				tmp_project.targets.append(tmp_target);
			}
			project_tree.append(tmp_project);
		}
		return project_tree;
	}
	
	
	
	function CreatePropertyGridTableFromTable(table)
	{
		local return_table = {};
		local count = 0;
		foreach(idx, a in table)
		{
			//util.line(" * CT * #" + count + " idx= "+idx);
			local children = {};
			local cur_element = {};
			
			cur_element["name"] <- idx;
			cur_element["label"] <- idx;
			cur_element["type"] <- 2;	// Type BOOL
			cur_element["style"] <- 1;	// Use a checkbox
			cur_element["value"] <- true;	// Type BOOL
			if(typeof a == "table")
			{
				//util.line(" * CT * #" + count + " idx= "+idx+" children found");
				children = CreatePropertyGridTableFromTable(a);
				cur_element["children"] <- children;
			}
			return_table[count] <- cur_element;
			count++;
		}
		return return_table;
	}
	
	function CreatePropertyGridFromProjectTable(table)
	{
		local return_table = {};
		local count = 0;
		foreach(idx, a in table)
		{
			//util.line(" * CT * #" + count + " idx= "+idx);
			local children = {};
			local cur_element = {};
			
			cur_element["name"] <- a.name;
			cur_element["label"] <- a.name;
			cur_element["type"] <- 2;	// Type BOOL
			cur_element["style"] <- 1;	// Use a checkbox
			cur_element["value"] <- true;	// Type BOOL
			if(a.rawin("targets"))
			{
				//util.line(" * CT * #" + count + " idx= "+idx+" children found");
				children = CreatePropertyGridFromProjectTable(a.targets);
				cur_element["children"] <- children;
			}
			return_table[count] <- cur_element;
			count++;
		}
		return return_table;
	}
	

	
	function OnClose (evt)
	{
		util.line("Close the Window...");
		evt.Skip(true);		
	}
	
	function FindBuildTarget(table,name)
	{
		if(typeof name != "wxString")
			name = wxString(name);
			
		local return_value = {value = 0, result = 0};
		local project = name.BeforeFirst("/");
		local target = name.AfterFirst("/");
		//util.line("Search for project \"" + project + "\" with target \"" + target + "\"");
		foreach(idx,a in table)
		{
			//util.line("Compare \"" + idx + "\" with \"" + project +"\"");
			if(project.Cmp(a.name) == 0)
			{
				foreach(i, val in a.targets)
				{
					if(target.Cmp(val.name) == 0)
					{
						//util.line("Type of build target: " + typeof val + " to string:" + val);
						return_value.value = val.target;
						return_value.result = 1;
						return return_value;
					}
				}
				
			}
		}
		return return_value;
	}
	
	function WxStringToBool(wx_string)
	{
		if(typeof wx_string != "wxString")
		{
			error("WxStringToBool: The type of \"wx_string\" is not a wxString\n");
			return false;
		}
		if(wx_string.CmpNoCase("True") == 0)
			return true;
		else
			return false;
	}
	
	function CreateTableFromPropertyGridTable(pg_table)
	{
		local return_table = {};
		local count = 0;
		foreach(idx,a in pg_table)
		{
			if(typeof a == "table")
			{
				return_table["child"+count] <- CreateTableFromPropertyGridTable(a);
				count++;
			}
			else if(idx == "name")
			{
				return_table[a] <- pg_table["value"];
			}
		}
		return return_table;
	}
	
	function SetKeyOfTable(table,key,value)
	{
		foreach(idx, a in table)
		{
			if(idx == key)
			{
				table[idx] = value;
			}
			if(typeof a == "table" || typeof a == "array")
			{
				SetKeyOfTable(table[idx],key,value);
			}
		}
	}
	
	function OnToggleAll(evt)
	{
		local property_table = CreatePropertyGridFromProjectTable(build_tree);
		if(current_value == true)
		{
			util.line("set all keys to false");
			current_value = false;
			SetKeyOfTable(property_table,"value",false);
		}
		else
		{
			util.line("set all keys to true");
			current_value = true;
			SetKeyOfTable(property_table,"value",true);
		}
			
		PropgridHandler.Clear();

        if(PropgridHandler.Populate(property_table) < 0)
		{
			error("Could not populate the property grid\nTry to throw an error...\n");
			throw "error";
		}
	}
	
	function OnBuildClick(evt)
	{
		local property_tabel = PropgridHandler.GetRoot();
		local tab = CreatePropertyGridFromProjectTable(property_tabel);
		
		current_compiling = {
		build_list = array(0),
		target = 0,
		compiling = false,
		project = 0,
		next_target = 0
		};
		
		main_dialog.GetControl("m_build_text").SetLabel("Prepare...");
		
		util.line("### start building ");
		foreach(idx,a in property_tabel)
		{
			local project = a["label"];
			local build = a["value"];
			util.line("Found Project: \"" + project + "\" with value " + build);
			
			if(WxStringToBool(build))
			{
				//util.line("So lets build");
				local children = a["children"];
				foreach(idx2,b in children)
				{
					local target = b["label"];
					local target_value = b["value"];
					if(WxStringToBool(target_value))
					{
						
						//util.line("# build in \"" + project + "\" Target \"" + target+ "\"");
						local build_target = FindBuildTarget(build_tree,project + "/" + target);
						if(build_target.result == 0)
							util.line("Could not find Target");
						else
						{
							//util.line("Type of build target: " + typeof build_target.value + " to string:" + build_target.value);
							local tmp_list = {};
							tmp_list.project <- project;
							tmp_list.target <- build_target.value;
							current_compiling.build_list.append(tmp_list);
							//local result = GetCompilerPlugin().Build(build_target.value);
							//util.line("Build finised with result: " + result);
						}
					}
				}
			}
			main_dialog.GetControl("m_build_gauge").Pulse();
			main_dialog.GetControl("m_project_gauge").Pulse();
		}
		BeginBuild();
		OnCompilingFinished(0);
	}
	
	function FindProject(name)
	{
		local count = GetProjectManager().GetProjectCount();
		for(local i =0; i < count; i++)
		{
			local cur_pro = GetProjectManager().GetProject(i);
			if(cur_pro.GetTitle().Cmp(name) == 0)
			{
				return cur_pro;
			}
		}
		return 0;
	}
	
	function BeginBuild()
	{
		main_dialog.GetControl("m_build_gauge").SetRange(current_compiling.build_list.len());
		current_compiling.compiling = true;
		main_dialog.GetControl("m_button_abort").Enable(true);
		main_dialog.GetControl("m_button_build").Enable(false);
		main_dialog.GetControl("m_button_toggle_all").Enable(false);
		old_project = GetProjectManager().GetActiveProject();
	}
	
	function EndBuild(message)
	{
		main_dialog.GetControl("m_build_gauge").SetRange(100);
		main_dialog.GetControl("m_build_gauge").SetValue(100);
		current_compiling.compiling = false;
		GetProjectManager().SetProject(old_project,false);
		main_dialog.GetControl("m_button_abort").Enable(false);
		main_dialog.GetControl("m_button_build").Enable(true);
		main_dialog.GetControl("m_button_toggle_all").Enable(true);
		main_dialog.GetControl("m_build_text").SetLabel(message);
	}
	
	function OnCompilingFinished(evt)
	{
		if(current_compiling.compiling == true)
		{
			if(current_compiling.next_target > 0)
			{
				util.line("last build finished with exit code: " + GetCompilerPlugin().GetExitCode() + " | Errors: " + GetCompilerPlugin().GetErrorCount() + " Warnings: "+ GetCompilerPlugin().GetWarningCount());
				if(main_dialog.GetControl("m_stop_on_error").GetValue())
				{
					if(GetCompilerPlugin().GetErrorCount() != 0)
					{
						InfoWindow("Compiling finished","An error was found",5000,1);
						EndBuild("Stopped on error...");
						wxBell();
						return;
					}
				}
			}
			if(current_compiling.next_target < current_compiling.build_list.len())
			{
				main_dialog.GetControl("m_build_text").SetLabel(current_compiling.next_target + "/" + current_compiling.build_list.len() + " (" + current_compiling.build_list[current_compiling.next_target].target.GetTitle() + ")" );
				
				main_dialog.GetControl("m_build_gauge").SetValue(current_compiling.next_target);
				local proj = FindProject(current_compiling.build_list[current_compiling.next_target].project);
				GetProjectManager().SetProject(proj,false);
				util.line("start building " + current_compiling.build_list[current_compiling.next_target].project + "/" + current_compiling.build_list[current_compiling.next_target].target.GetTitle());
				local index = current_compiling.next_target;
				current_compiling.next_target++;
				local result = GetCompilerPlugin().Build(current_compiling.build_list[index].target);
				
				//util.line("Build finised with result: " + result);
			}
			else
			{
				// we have build the whole list
				// lets clean up
				EndBuild("Finished...");
				wxBell();
				InfoWindow("Compiling finished","compilation was completed",5000,1);
			}
		}
	}
	
	function OnAbortBuild(evt)
	{
		util.line("Abort Building");
		GetCompilerPlugin().KillProcess();
		EndBuild("Aborted...");
	}

    function ShowDialog()
    {
        util.line("Start " + info.name);
		util.line("Version: " + info.version);
        
		
		if(loaded == false)
		{
			main_dialog = CreateWxDialog(this);
			
			// Load the resource zip file
			
			if(LoadResource(this,"SelectiveCompiling.zip") == false)
			{
				DisplayError("Could not load resource \"SelectiveCompiling.zip\" ");
				return;
			}
			
			local ret = main_dialog.LoadFromXRCPool("selective_compiling_main_diag");
			if(ret != RESOURCE_LOADED_SUCCESFULLY)
			{
				DisplayError("Could not load \"selective_compiling_main_diag\" from Resource pool");
				return;
			}
			
			PropgridHandler = wxPropertyGridWrapper(main_dialog.GetControl("m_propertygrid"));
			local window = main_dialog.GetWindow();
			
			util.line("Register events");
            main_dialog.RegisterEventHandler(wxEVT_CLOSE_WINDOW,XRCID("selective_compiling_main_diag"),this,"OnClose");
			main_dialog.RegisterEventHandler(wxEVT_BUTTON,XRCID("m_button_build"),this,"OnBuildClick");
			main_dialog.RegisterEventHandler(wxEVT_BUTTON,XRCID("m_button_toggle_all"),this,"OnToggleAll");
			main_dialog.RegisterEventHandler(wxEVT_BUTTON,XRCID("m_button_abort"),this,"OnAbortBuild");
			
			RegisterCBEvent(this,cbEVT_COMPILER_FINISHED,"OnCompilingFinished");
			
			main_dialog.GetControl("m_button_abort").Enable(false);
			
			loaded = true;
		
		}
		
		build_tree = GetWorkspaceTree();
		util.PrintTable(build_tree,0);
		property_table = CreatePropertyGridFromProjectTable(build_tree);
		util.line("# property grid table: ");
		util.PrintTable(property_table,0);
		
		PropgridHandler.Clear();

        if(PropgridHandler.Populate(property_table) < 0)
		{
			error("Could not populate the property grid\nTry to throw an error...\n");
			throw "error";
		}
		
		main_dialog.Show(true);

		
        //local retcode = dialog.Show(true);
		

		
		
		
        //print("dialog exited with " + retcode);

    };

    main_dialog = 0;
	info = 0;
	loaded = false;
	PropgridHandler = 0;
	property_table = 0;
	build_tree = 0;
	current_value = true;
	current_compiling = {
		build_list = array(0),
		target = 0,
		compiling = false,
		project = 0,
		next_target = 0,
	};
	old_project = 0;
}

// this call actually registers the script plugin with Code::Blocks
RegisterPlugin(user_dialog_test_Plugin());

// if you want to call this plugin's Execute() function, use this in a script:
// ExecutePlugin(_T("Scripting_TestPlugin"));
